
	NOLIST
; PICBASIC PRO(TM) Compiler 2.60C, (c) 1998, 2011 microEngineering Labs, Inc. All Rights Reserved. 

LABEL?L macro Label
        RST?RP
    ifdef PM_USED
        LALL
Label
        XALL
    else
Label
    endif
    endm

ADD?BCB macro Bin, Cin, Bout
    if ((Bout) == (Bin))
      if ((Cin) == 1)
        CHK?RP  Bout
        incf    Bout, F
      else
        movlw   Cin
        CHK?RP  Bin
        addwf   Bin, F
      endif
    else
      if ((Cin) == 1)
        CHK?RP  Bin
        incf    Bin, W
        MOVE?AB Bout
      else
        movlw   Cin
        CHK?RP  Bin
        addwf   Bin, W
        MOVE?AB Bout
      endif
    endif
    endm

ADD?WBW macro Win, Bin, Wout
        MOVE?BA Bin
    if ((Wout) == (Win))
        CHK?RP  Wout
        addwf   Wout, F
        btfsc   STATUS, C
        incf    (Wout) + 1, F
    else
        CHK?RP  Win
        addwf   Win, W
        MOVE?AB Wout
        MOVE?BA (Win) + 1
        btfsc   STATUS, C
        addlw   1
        MOVE?AB (Wout) + 1
    endif
    endm

ADD?WCW macro Win, Cin, Wout
    if ((Wout) == (Win))
        CHK?RP  Wout
      if ((Cin) == 1)
        incf    Wout, F
        btfsc   STATUS, Z
        incf    (Wout) + 1, F
      else  
        movlw   low (Cin)
        addwf   Wout, F
        if (((Cin) >> 8) == 0)
        btfsc   STATUS, C
        incf    (Wout) + 1, F
        else
        movlw   (Cin) >> 8
        btfsc   STATUS, C
        addlw   1
        addwf   (Wout) + 1, F
        endif
      endif
    else
        movlw   low (Cin)
        CHK?RP  Win
        addwf   Win, W
        MOVE?AB Wout
      if (((Cin) >> 8) == 0)
        MOVE?BA (Win) + 1
        btfsc   STATUS, C
        addlw   1
        MOVE?AB (Wout) + 1
      else
        movlw   (Cin) >> 8
        btfsc   STATUS, C
        addlw   1
        CHK?RP  Win
        addwf   (Win) + 1, W
        MOVE?AB (Wout) + 1
      endif
    endif
    endm

DIV?BCW macro Bin, Cin, Wout
    if ((Cin) == 2)
        bcf     STATUS, C
        CHK?RP  Bin
        rrf     Bin, W
        MOVE?AW Wout
    else
        MOVE?BW Bin, R0
        MOVE?CW Cin, R1
        L?CALL  DIV
        MOVE?AWW R0, Wout
    endif
    endm
DIV_USED = 1

DIV?WCW macro Win, Cin, Wout
    if ((Cin) == 2)
        bcf     STATUS, C
      if ((Wout) == (Win))
        CHK?RP  Wout
        rrf     (Wout) + 1, F
        rrf     Wout, F
      else
        CHK?RP  Win
        rrf     (Win) + 1, W
        MOVE?AB (Wout) + 1
        CHK?RP  Win
        rrf     Win, W
        MOVE?AB Wout
      endif
    else
        MOVE?WW Win, R0
        MOVE?CW Cin, R1
        L?CALL  DIV
        MOVE?AWW R0, Wout
    endif
    endm
DIV_USED = 1

DIV?WWW macro Win1, Win2, Wout
        MOVE?WW Win1, R0
        MOVE?WW Win2, R1
        L?CALL  DIV
        MOVE?AWW R0, Wout
    endm
DIV_USED = 1

MUL?WCW macro Win, Cin, Wout
        MOVE?WW Win, R3
        MOVE?CW Cin, R1
        L?CALL  MUL
        MOVE?AWW R2, Wout
    endm
MUL_USED = 1

NXOR?BCB macro Bin, Cin, Bout
        movlw   Cin
        CHK?RP  Bin
        xorwf   Bin, W
        xorlw   -1
        MOVE?AB Bout
    endm

CMPGT?BCL macro Bin, Cin, Label
    if ((Cin) < 0)
        L?GOTO  Label
    else
      if ((Cin) < 0ffh)
        CLRWDT?
        MOVE?CA (Cin) + 1
        CHK?RP  Bin
        subwf   Bin, W
        BIT?GOTO 1, STATUS, C, Label
      endif
    endif
    endm

CMPGT?WCL macro Win, Cin, Label
    if ((Cin) < 0)
        L?GOTO  Label
    else
      if ((Cin) < 0ffffh)
        MOVE?WW Win, R0
        MOVE?CB (Cin) >> 8, R1 + 1
        MOVE?CA low (Cin)
        L?CALL  CMPGT
        BIT?GOTO 0, STATUS, Z, Label
      endif
    endif
    endm
CMPGT_USED = 1

CMPLE?WCL macro Win, Cin, Label
    if ((Cin) >= 0ffffh)
        L?GOTO  Label
    else
      if ((Cin) >= 0)
        MOVE?WW Win, R0
        MOVE?CB (Cin) >> 8, R1 + 1
        MOVE?CA low (Cin)
        L?CALL  CMPLE
        BIT?GOTO 0, STATUS, Z, Label
      endif
    endif
    endm
CMPLE_USED = 1

CMPLT?WCL macro Win, Cin, Label
    if ((Cin) >= 10000h)
        L?GOTO  Label
    else
      if ((Cin) > 0)
        MOVE?WW Win, R0
        MOVE?CB (Cin) >> 8, R1 + 1
        MOVE?CA low (Cin)
        L?CALL  CMPLT
        BIT?GOTO 0, STATUS, Z, Label
      endif
    endif
    endm
CMPLT_USED = 1

CMPNE?TCL macro Regin, Bitin, Cin, Label
    if ((Cin) == 0)
        CLRWDT?
        BIT?GOTO 1, Regin, Bitin, Label
    else
      if ((Cin) == 1)
        CLRWDT?
        BIT?GOTO 0, Regin, Bitin, Label
      else
        L?GOTO  Label
      endif
    endif
    endm

DIG?WCB macro Win, Cin, Bout
        MOVE?WW Win, R0
        movlw   Cin
        L?CALL  DIG
        MOVE?AB Bout
    endm
DIG_USED = 1

ASM? macro
        RST?RP
    endm

DISABLE? macro
    endm

ENABLE? macro
    endm

ENDASM? macro
    endm

GOSUB?L macro Label
    local dlabel
    ifdef DEBUG_STACK
        CHK?RP  DEBUG_STACK
      ifdef DEBUG_STACK_ADDR
        bcf     STATUS, C
        rlf     DEBUG_STACK, W
        addlw   DEBUG_STACK_ADDR
        movwf   FSR
        movlw   low (dlabel)
        movwf   INDF
        incf    FSR, F
        movlw	high (dlabel)
        movwf   INDF
      endif
        incf    DEBUG_STACK, F
    endif
        L?CALL  Label
dlabel
    endm

GOTO?L macro Label
        L?GOTO  Label
    endm

ICALL?L macro Label
        L?CALL  Label
    endm

NEXT?BCL macro Bin, Cin, Label
    if ((Cin) == 1)
        CHK?RP  Bin
      if ((PREV_BANK == 0) & (CODE_SIZE <= 2))
        incfsz  Bin, F
        goto    Label
      else
        incf    Bin, F
        BIT?GOTO 0, STATUS, Z, Label
      endif
    else
        movlw   Cin
        CHK?RP  Bin
        addwf   Bin, F
      if ((Cin) <= 255)
        BIT?GOTO 0, STATUS, C, Label
      endif
    endif
    endm

NEXT?WCL macro Win, Cin, Label
    local endlabel
    if ((Cin) == 1)
        CHK?RP  Win
        incf    Win, F
        btfsc   STATUS, Z
      if ((PREV_BANK == 0) & (CODE_SIZE <= 2))
        incfsz  Win + 1, F
        goto    Label
      else
        incf    Win + 1, F
        BIT?GOTO 0, STATUS, Z, Label
      endif
    else
      if ((Cin) <= 255)
        MOVE?CA Cin
        CHK?RP  Win
        addwf   Win, F
        BIT?GOTO 0, STATUS, C, Label
        CHK?RP  Win
        if ((PREV_BANK == 0) & (CODE_SIZE <= 2))
        incfsz  Win + 1, F
        goto    Label
        else
        incf    Win + 1, F
        BIT?GOTO 0, STATUS, Z, Label
        endif
      else
        movlw   low (Cin)
        CHK?RP  Win
        addwf   Win, F
        movlw   (Cin) >> 8
        btfsc   STATUS, C
        addlw   1
        BIT?GOTO 1, STATUS, C, endlabel
        addwf   Win + 1, F
          if ((Cin) <= 65535)
        BIT?GOTO 0, STATUS, C, Label
          endif
      endif
    endif
endlabel
    endm

ONINT?LL macro Inthand, Intchk
    local label
        bsf     INTCON, GIE
        L?GOTO  label
Intchk  btfsc   INTCON, GIE
        return
        L?GOTO  Inthand
label
    endm
ONINT_USED = 1

PAUSE?C macro Cin
    if (((Cin) >> 8) == 0)
        MOVE?CA Cin
        L?CALL  PAUSE
    else
        MOVE?CB (Cin) >> 8, R1 + 1
        MOVE?CA low (Cin)
        L?CALL  PAUSEL
    endif
    endm
PAUSE_USED = 1

READADDRESS?B macro Bin
        MOVE?BB Bin, EEADR
    endm

READ?B macro Bout
        L?CALL  READ
        MOVE?AB Bout
    endm
READ_USED = 1

RESUME? macro
        RST?RP
        retfie
    endm

RETURN? macro
    ifdef DEBUG_STACK
        CHK?RP  DEBUG_STACK
        decf    DEBUG_STACK, F
    endif
        RST?RP
        return
    endm


	LIST
